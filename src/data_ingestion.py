# its function is to fetch data from a remote server like, MongoDB or somewhere else. 
# for simplicity here, we will fetch the data from github

import pandas as pd
import os
from sklearn.model_selection import train_test_split
import logging
import yaml


# ensure the "logs" directory exists
log_dir = "logs"
os.makedirs(log_dir, exist_ok=True)

#logging configuration
logger = logging.getLogger("data_ingestioin")
logger.setLevel("DEBUG") # four setLevel are there, as mention in the galaxy notebook. 

console_handler = logging.StreamHandler()
console_handler.setLevel("DEBUG")

log_file_pth = os.path.join(log_dir, "data_ingestion.log") # "data_ingestion.log" is generated by logger
file_handler= logging.FileHandler(log_file_pth)
file_handler.setLevel("DEBUG")

formatter = logging.Formatter("%(asctime)s - %(name)s %(levelname)s - %(message)s")
console_handler.setFormatter(formatter) # for console output
file_handler.setFormatter(formatter) # for saving the file 

logger.addHandler(console_handler)
logger.addHandler(file_handler)

def load_params(params_path:str)-> dict:
    """load parameters from yaml file"""
    try:
        with open(params_path) as file:
            params= yaml.safe_load(file)

        logger.debug("Parameters retrieved from %s", params_path)
        return params
    except FileNotFoundError:
        logger.error("File not found: %s", params_path)
        raise

def load_data(data_url:str)->pd.DataFrame:
    "Load data from csv file."
    try:
        df = pd.read_csv(data_url)
        logger.debug("Data loaded from %s", data_url)
        return df
    except pd.errors.ParserError as e:
        logger.error(f'Failed to parse the csv:{e}')
        raise
    except Exception as e:
        logger.error(f'Unexpected error occoured while loading the data:{e}')
        raise

def preprocess_data(df: pd.DataFrame)->pd.DataFrame:
    try:
        df.drop(columns=['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'], inplace=True)
        df.rename(columns={'v1': 'target', 'v2': 'text'},inplace=True)
        logger.debug(" Data preprocessing completed")
        return df
    except KeyError as e:
        logger.error("Missing column in the dataframe:%s",e)
    except Exception as k:
        logger.error("Unexpected error occurred while loading the data:%s",k)
        raise

def save_data(train_data:pd.DataFrame, test_data:pd.DataFrame,data_path:str)->None:
    try:
        raw_data_path = os.path.join(data_path, "raw")
        os.makedirs(raw_data_path, exist_ok=True)
        train_data.to_csv(os.path.join(raw_data_path,'train.csv'),index = False)
        test_data.to_csv(os.path.join(raw_data_path,"test.csv"),index = False)
        logger.debug("Train and test data saved to %s", raw_data_path)
    except Exception as e:
        logger.error("Unexpected error occoured while saving the data")

def main():
    try:
        params = load_params(params_path="params.yaml")
        test_size = params['data_ingestion']['test_size']

        data_path = "https://raw.githubusercontent.com/DevelopBG/Datasets/refs/heads/main/spam.csv"
        df = load_data(data_path)
        final_df = preprocess_data(df)
        train_data, test_data = train_test_split(final_df, test_size=test_size, random_state=2)
        save_data(train_data, test_data,data_path= "./data")
    except Exception as e:
        logger.debug("Failed to complete data ingestion process:%s", e)

if __name__ == "__main__":

    main()



